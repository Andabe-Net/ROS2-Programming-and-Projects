ROS Programming

Installation: ROS humble installed on WSL2 Ubuntu version 22.04.4

BUGS:

Bug1 during installation:
	Could not be able to "add the ROS2 GPG key with apt" with the following command because connection to the github repo always
	timeout. ALso could not open in my browser.
  command:
	>>> sudo apt update && sudo apt install curl -y
	>>> sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg
  solution>>: 
	used google Colab and python "requests" module to download the key from "https://raw.githubusercontent.com/ros/rosdistro/master/ros.key" 
	and saved the the key to a newly created file same name as "ros-archive-keyring.gpg",
	downloaded the file and moved to /usr/share/keyrings/ directory on my ubuntu,
	so that file is now /usr/share/keyrings/ros-archive-keyring.gpg containing the key.
	
	alternative:
		Since I could access the raw github file with colab and not with my browser,
		most likely a network issue, and using a VPN worked well, as I was able to view
		the key in github.

Bug2: 
	-always source /opt/ros/humble/setup.bash to load ros2 commands else get command not found error,
	-maybe a good idea to add the source command to the start up file with
	 >>> echo "source /opt/ros/humble/setup.bash" >> ~/.bashrc	
info:	
	ROS2 works on the principle of inter-component communication

Bug3 with running turtlesim: 

	GUI and opening mutilple GUI windows:
	 - unfortunaletly, WSL2 Ubuntu has no GUI. Needed to install VcXsrv,
	- setting environment variable to the ID of the VcXsrv instance with DISPLAY=:0.0,
	- I can open multiple VcXsrv windows each of different ID, then set environment variables
	  DISPLAY to corresponding ID of the monitor in each terminal instance.
	
	Remote and local Connection:
		- Could not control turtle using commands.
		- found out ROS2 communication is not limited to localhost.
		solutions>>
			- Putting off VPN I was able to solve this.
			- ROS_LOCALHOST_ONLY environment variable allows you to limit ROS 2 communication to localhost only
			- do this with: 
				>>>echo "export ROS_LOCALHOST_ONLY=1" >> ~/.bashrc

	Remapping: allows you to reassign default node properties e.g node name, topic name, etc to custom values. 
		-needed a second teloeop to control turtle2
		-do with remapping the cmd_vel topic to target turtle2 with
		  >>> ros2 run turtlesim turtle_teleop_key --ros-args --remap turtle1/cmd_vel:=turtle2/cmd_vel
Bug4:
	Running rqt in its own window
	-open a new vcXsrv instance, it will have its own window ID e.g :1.0
	-set and export DISPLAY variable to the ID on the terminal to run rqt e.g >>> export DISPLAY=:1.0
	
info:Running an executable froma package:
	>>> ros2 run <package_name> <executable_name>
	>>>ros2 run turtlesim turtlesim_node
info: a single executable(C++ or python program) can contain one or more nodes
	list nodes
	>>> ros2 node list
	info about nodes
	>>> ros2 node info <node_name>
	   >>> ros2 node info /my_turtle

topics:
	list topics
	>> ros2 topic list
	>> ros2 topic list -t

	view data published over a topic
	>> ros2 topic echo <topic_name>
	>> ros2 topic echo /turtle1/cmd_vel
	
	vie topic info:
	>> ros2 topic info /turtle1/cmd_vel
rqt_gragh: inspection tool to view and inspect ROS gragh
	>>> rqt_graph
info on ros2 interface show: 
	Nodes send data over topics using messages. Publishers and subcribers must send and receive 
	meassages of the same type to communicate
	to view details about a particular message type
	>> ros2 interface show <message_type>
	cmcd_level of type geometry_msgs/msg/Twist(meaning module geometry_msgs has a msg called Twist)
	>> ros2 interface show geometry_msgs/msg/Twist

info on ros2 topic pub:

	to publish message to a topic directly, must be in YAML format
	check topic type
	>> ros2 topic type <topic_name>
	>> ros2 topic pub <topic_name> <message_type> '<args>'
	>> ros2 topic pub --once /turtle2/cmd_vel geometry_msgs/msg/Twist "{linear: {x: 2.0,y: 0.0,z: 0.0}, angular: {x: 1.0, y: 2.0, z: 0.0}}"
	or to deliver message at steady stream of 1Hz
	>> ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist "{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}"
	check at what rate data is passing through a topic
	>> ros2 topic hz <topic_name>	

info on ros2 services (for request-response communication): not suiable for continous calls(see topics or actions):
	list services with type
	>> ros2 service list type
	find out the type of a particular service
	>> ros2 service type <service_name>
	find all services of a particular type
	>> ros2 service find <type_name>
	
	to call a service, must know the structure of the input arguments
	>> ros2 interface show <type_name>
	call service
	>> ros2 service call <service_name> <service_type> <arguments>	
		"<arguments> is optional since some service call do not require them"

info on parameters: each node has parameters(node configuratio or settings)
	>> ros2 param list
	get parameter type and value
	>> ros2 param  get <node_name> <parameter_name>
	>> ros2 param get /turtlesim background_b
	change parameter value at runtime
	>> ros2 param set <node_name> <parameter_name> <value>
	>>ros2 param set /turtlesim background_b 255

	view all of a node's parameter values 
	>> ros2 param dump <node_name>
	 may save them to a file
	>> ros2 param dump <node_name> > <file_name>
	>> ros2 param dump /turtlesim > turtlesim.yaml

	load param to a node, read_only parameters can only be modified at node startup and not afterwards
	>> ros2 param load <node_name> <parameter_file>
	>>ros2 param load /turtlesim turtlesim.yaml

	load start node with saved parameter values, read-only parameters will also be modified at node startup
	>> ros2 run <package_name> <executable_name> --ros-args --params-file <parameter-file>
	>> ros2 run turtlesim turtlesim_node --ros-args --params-file turtlesim.yaml


info on actions: 
	all actions in the ROS graph
	>> ros2 action list
	>> ros2 action list -t

	check for action servers and action clients in a node
	>>ros2 node info <node_name>

	intospect an action, to  see the server and client details
	>>ros2 action info <action_name>

	view type structure of the type of action goal to send the action server, displaying the form of rewuest, result and feedback
	>> ros2 interface show <action_type>
	>> ros2 interface show turtlesim/action/RotateAbsolute

	send an action goal
	>> ros2 action send_goal <action_namme> <action_type> <values>
	with feedback
	>> ros2 action send_goal <action_namme> <action_type> <values> --feedback

logging:
	using rqt_console to view logs, save logs and load saved logs
	>> ros2 run rqt_console rqt_console
	
	set default log level when starting a node
	>> ros2 run turtlesim turtlesim_node --ros-args --log-level WARN

launch: launching multiple nodes:
	>> ros2 launch turtlesim multisim.launch.py
	publish control data to the two nodes over a topic
	>> ros2 topic pub  /turtlesim1/turtle1/cmd_vel geometry_msgs/msg/Twist "{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}"
	>> ros2 topic pub  /turtlesim2/turtle1/cmd_vel geometry_msgs/msg/Twist "{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: -1.8}}"
ros2 bag: (can also access via rqt)
	to record data passed on topics
	>> ros2 bag record <topic_name>
	record muliple topics to a file named eventd
	>> ros2 bag record -o events <topic_name1> <topic_name2>

	record all topics
	>>ros2 bag record -o events -a
	
	play a record at 1hz rate
	>> ros2 bag play --rate 1 <bag_name>
	bag info
	>> ros2 bag info <bag_name>	

CLIENT LIBRARIES: 
	colcon: a build tool
	install:>> sudo apt install python3-colcon-common-extensions

	-- it is important to source an existing ROS 2 installation, or an underlay, to provide the necessary dependencies
	-- any other workspace will be an overlay on top of the underlay

	build ("--symlink-install allows the installed files to be changed by changing the files in the source for faster iteration")
	>> colcon build --symlink-install

	sourrce the environment from the workspace
	>> source install/setup.bash

	Workspaces: a workspace is a directory containing ros2 packages
	packages in the overlay override packages in the underlay when working from the overlay(secondary) workspace

	resolve dependencies from workspace
	>> rosdep install -i --from-path src --rosdistro humble -y
	>> colcon build
	build options
	--packages-up-to (builds the package you want, plus all its dependencies, but not the whole workspace (saves time))
	--symlink-install (don't rebuild every time you tweak python scripts with this option)
	--event-handlers console_direct+ (shows console output while building (can otherwise be found in the log directory))
	--executor sequential (processes the packages one by one instead of using parallelism)

	build a single package from src
	-- colcon build --packages-select <package_name>

	sourcing
		sourcing an overlay in the same terminal where you built
		or building where an overlay is sourced may cause complex issues
		--- use separate terminals for building and for sourcing  
		
		sourcing the local_setup adds only the packages in the overlay to the environment
		sourcing setup adds the packages in the overlay and the underlay to the linux environment
		so that sourcing setup is the same as souricng ROS 2 installation's setup followed by sourcing local_setup
	
	Creating a Package:
		>> ros2 pkg create 
		>> ros2 pkg create --build-type --license --node-name package_name
	Building a package: to build a specific package use '--packages-select <package_name>' option or place COLCON_IGNORE files in other packages in the workspace that you don't want to build 
		>> colcon build	--packages-select <package_name>

	
	
